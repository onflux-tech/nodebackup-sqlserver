---
description: 
globs: 
alwaysApply: true
---
# Roadmap e Tasklist - Próximas Implementações

## 📍 Estado Atual (v0.2.2)
**Funcionalidades Implementadas:**
- ✅ Setup inicial interativo via web
- ✅ Interface web com autenticação segura
- ✅ Configuração criptografada (config.enc)
- ✅ Backup automático SQL Server (.bak)
- ✅ Compressão 7-Zip (.7z)
- ✅ Upload FTP automatizado
- ✅ Agendamento flexível de backups
- ✅ Instalação como serviço Windows
- ✅ Sistema de logs rotacionados
- ✅ **Política de Retenção de Backups** (v0.1.0)
  - ✅ Modo Clássico (sobrescrita) e Modo Retenção (timestamp)
  - ✅ Limpeza automática local e FTP configurável
  - ✅ Interface web completa para configuração
  - ✅ Botões de limpeza manual
  - ✅ Documentação completa em `docs/RETENTION_POLICY.md`
- ✅ **Painel de Histórico Completo** (v0.2.0)
  - ✅ Banco SQLite para persistir histórico de backups
  - ✅ Estatísticas detalhadas (total, sucessos/falhas, duração média, tamanho total)
  - ✅ Interface responsiva com filtros por status e paginação
  - ✅ Interface modernizada com tema claro/escuro e fonte Inter
  - ✅ Sidebar responsiva e suporte móvel completo
  - ✅ Sistema de autenticação aprimorado com middleware
  - ✅ Cache control para APIs

## 🚀 Roadmap de Desenvolvimento

> **📌 Foco Atual**: Versões 0.x.x para estabilização e funcionalidades essenciais antes do release v1.0.0 estável.

### 📊 **FASE 1: Gerenciamento e Monitoramento** (v0.1.0 - v0.3.0)
*Prioridade: Alta | Estimativa: 6-9 semanas total*

#### ✅ **1.1 Política de Retenção** (IMPLEMENTADO v0.1.0)
**Arquivos modificados:** [src/services/database.js](mdc:src/services/database.js), [src/config.js](mdc:src/config.js), [src/services/ftp.js](mdc:src/services/ftp.js), [src/api/routes.js](mdc:src/api/routes.js)

**Implementações concluídas:**
- ✅ **Configuração de Retenção**
  - ✅ Campo `retention` em config.js com enabled, localDays, ftpDays, autoCleanup, mode
  - ✅ Interface web completa na aba "Política de Retenção"
  - ✅ Validação: mínimo 1 dia, máximo 365 dias
  - ✅ Dois modos: Clássico (sobrescrita) e Retenção (timestamp)
  
- ✅ **Limpeza Automática Local**
  - ✅ Método `cleanupOldBackups()` em database.js
  - ✅ Execução após cada backup consolidado (se habilitado)
  - ✅ Log detalhado de arquivos removidos
  - ✅ Parsing inteligente de datas (nome do arquivo e mtime)
  
- ✅ **Limpeza FTP (Opcional)**
  - ✅ Método `cleanupFtpBackups()` em ftp.js
  - ✅ Listagem e remoção de arquivos antigos do FTP
  - ✅ Configuração opcional (pode manter FTP intacto)
  - ✅ Parsing inteligente de datas FTP (múltiplos formatos)

- ✅ **Interface de Limpeza Manual**
  - ✅ Rotas `/api/cleanup-local` e `/api/cleanup-ftp`
  - ✅ Botões "🗑️ Limpar Local" e "🌐 Limpar FTP"
  - ✅ Feedback detalhado com contagem de arquivos removidos
  - ✅ Validações e mensagens de erro amigáveis

#### 📈 **1.2 Painel de Histórico** (IMPLEMENTADO v0.2.2)
**Arquivos implementados:** `src/services/history.js`, `public/history.js`, interface integrada

**Implementações concluídas:**
- ✅ **Banco de Dados Histórico**
  - ✅ SQLite local para armazenar histórico completo
  - ✅ Schema: id, timestamp, databases, status, fileSize, duration, errorMessage
  - ✅ Migração automática na inicialização
  
- ✅ **API de Histórico**
  - ✅ GET `/api/history` - listar backups paginados com filtros
  - ✅ GET `/api/history/stats` - estatísticas gerais detalhadas
  - ✅ Filtros por data, status e paginação completa
  
- ✅ **Interface Web Modernizada**
  - ✅ Painel de histórico integrado ao dashboard
  - ✅ Tabela responsiva com filtros e paginação
  - ✅ Modal para visualizar detalhes de erros
  - ✅ Interface com tema claro/escuro
  - ✅ Sidebar responsiva e navegação mobile
  - ✅ Ícones Lucide e fonte Inter

#### 📋 **1.3 Logs em Tempo Real** (Próximo - v0.3.0)
**Arquivos a modificar:** [src/utils/logger.js](mdc:src/utils/logger.js), [public/script.js](mdc:public/script.js)

**Tasklist:**
- [ ] **WebSocket para Logs**
  - [ ] Integrar `socket.io` compatível Node 12
  - [ ] Stream de logs em tempo real
  - [ ] Filtros por nível (info, warn, error)
  
- [ ] **Interface de Logs**
  - [ ] Seção "Logs ao Vivo" no dashboard
  - [ ] Auto-scroll e pause manual
  - [ ] Download de logs atuais

---

### 📧 **FASE 2: Notificações** (v0.4.0 - v0.5.0)
*Prioridade: Média | Estimativa: 5-7 semanas total*

#### ✉️ **2.1 Alertas por E-mail**
**Arquivos a criar:** `src/services/notification.js`, configuração SMTP

**Tasklist:**
- [ ] **Configuração SMTP**
  - [ ] Adicionar campos SMTP em config.js
  - [ ] Interface web para configurar e-mail
  - [ ] Teste de conexão SMTP
  
- [ ] **Templates de E-mail**
  - [ ] Template sucesso: resumo, arquivos, tamanhos
  - [ ] Template falha: erro detalhado, logs relevantes
  - [ ] Template HTML responsivo
  
- [ ] **Integração com Scheduler**
  - [ ] Enviar e-mail após cada backup
  - [ ] Configuração: sempre, só falhas, só sucessos
  - [ ] Rate limiting (evitar spam)

#### 📱 **2.2 Integração Telegram/WhatsApp**
**Arquivos a criar:** `src/services/telegram.js`, `src/services/whatsapp.js`

**Tasklist:**
- [ ] **Bot Telegram**
  - [ ] Usar `node-telegram-bot-api` (Node 12 compatível)
  - [ ] Comandos: /status, /lastbackup, /logs
  - [ ] Configuração via Bot Token
  
- [ ] **WhatsApp (API não oficial)**
  - [ ] Integrar biblioteca WhatsApp Web
  - [ ] Mensagens de status via número configurado
  - [ ] Fallback se WhatsApp falhar

---

### 📁 **FASE 3: Expansão das Fontes** (v1.1.0+)
*Prioridade: Média | Estimativa: 5-7 semanas* (pós v1.0.0)

#### 🗂️ **3.1 Backup de Arquivos e Pastas**
**Arquivos a criar:** `src/services/fileBackup.js`, interface seleção pastas

**Tasklist:**
- [ ] **Seleção de Diretórios**
  - [ ] Interface web para escolher pastas
  - [ ] Exclusões por extensão/padrão
  - [ ] Preview do que será incluído
  
- [ ] **Inclusão no Backup Consolidado**
  - [ ] Comprimir pastas junto com .bak
  - [ ] Manter estrutura de diretórios
  - [ ] Progress indicator para pastas grandes

#### 🗄️ **3.2 Suporte MySQL e PostgreSQL**
**Arquivos a criar:** `src/services/mysql.js`, `src/services/postgres.js`

**Tasklist:**
- [ ] **MySQL Support**
  - [ ] Usar `mysql2` compatível Node 12
  - [ ] mysqldump para backup
  - [ ] Interface configuração MySQL
  
- [ ] **PostgreSQL Support**
  - [ ] Usar `pg` compatível Node 12
  - [ ] pg_dump para backup
  - [ ] Interface configuração PostgreSQL
  
- [ ] **Seletor de Tipo de Banco**
  - [ ] Interface multi-banco
  - [ ] Validação específica por tipo
  - [ ] Backup consolidado multi-tipo

---

### ☁️ **FASE 4: Expansão dos Destinos** (v1.2.0+)
*Prioridade: Baixa | Estimativa: 4-6 semanas* (pós v1.0.0)

#### 🪣 **4.1 Integração S3**
**Arquivos a criar:** `src/services/s3.js`, configuração AWS

**Tasklist:**
- [ ] **AWS S3 Support**
  - [ ] Usar `aws-sdk` v2 (Node 12 compatível)
  - [ ] Upload multipart para arquivos grandes
  - [ ] Configuração: bucket, região, credenciais
  
- [ ] **MinIO/S3 Compatível**
  - [ ] Support para MinIO e outras S3-likes
  - [ ] Configuração de endpoint customizada
  - [ ] Teste de conectividade

#### 📁 **4.2 Google Drive Integration**
**Arquivos a criar:** `src/services/googleDrive.js`, OAuth setup

**Tasklist:**
- [ ] **Google Drive API**
  - [ ] Usar `googleapis` compatível Node 12
  - [ ] OAuth 2.0 flow para autorização
  - [ ] Upload para pasta específica
  
- [ ] **Interface OAuth**
  - [ ] Setup inicial via navegador
  - [ ] Renovação automática de tokens
  - [ ] Revogação de acesso

---

### 🔄 **FASE 5: Funcionalidades Avançadas** (v2.0.0+)
*Prioridade: Baixa | Estimativa: 6-8 semanas* (major release)

#### 📂 **5.1 Interface de Restauração**
**Arquivos a criar:** `src/services/restore.js`, `public/restore.html`

**Tasklist:**
- [ ] **Listagem de Backups**
  - [ ] Listar backups locais e remotos
  - [ ] Preview do conteúdo do .7z
  - [ ] Informações: data, tamanho, bancos incluídos
  
- [ ] **Processo de Restauração**
  - [ ] Download automático se remoto
  - [ ] Extração segura do .7z
  - [ ] Restauração SQL Server com RESTORE DATABASE
  
- [ ] **Interface Web Segura**
  - [ ] Confirmações múltiplas
  - [ ] Log detalhado da restauração
  - [ ] Backup atual antes de restaurar

## 🔧 Tarefas de Infraestrutura

### **Melhorias Imediatas**
- [ ] **Migrar para Node 16 LTS** (quebra compatibilidade)
- [ ] **Adicionar ESLint** com regras Node 12
- [ ] **Testes Automatizados** (Jest compatível Node 12)
- [ ] **GitHub Actions** para build automático
- [ ] **Documentação API** (JSDoc)

### **Melhorias de Performance**
- [ ] **Backup Incremental** (só mudanças)
- [ ] **Compressão Paralela** (múltiplos cores)
- [ ] **Cache de Configurações** (evitar I/O)
- [ ] **Connection Pooling** SQL Server

### **Melhorias de UX**
- [ ] **Wizard de Configuração** passo-a-passo
- [ ] **Dark Mode** na interface
- [ ] **Responsividade Mobile** completa
- [ ] **Ícones e Animações** modernas

## 📝 Notas de Implementação

### **Compatibilidade Node 12**
- Todas as features devem manter compatibilidade
- Testar com `pkg node12-win-x64` antes de merge
- Evitar dependências que exijam Node 14+

### **Ordem de Prioridade**
1. **Fase 1** (Monitoramento) - Mais solicitado pelos usuários
2. **Fase 2** (Notificações) - Facilita operação
3. **Fase 3** (Expansão fontes) - Novos casos de uso
4. **Fase 4** (Expansão destinos) - Cloud adoption
5. **Fase 5** (Avançadas) - Features premium

### **Critérios de Qualidade**
- ✅ Tests unitários para novos serviços
- ✅ Documentação atualizada no README
- ✅ Logs apropriados para debugging
- ✅ Tratamento de erros robusto
- ✅ Interface responsiva e acessível

## 🗓️ Cronograma Detalhado v0.x.x

### ✅ **v0.1.0 - Política de Retenção** (CONCLUÍDO)
**Objetivo**: Implementar limpeza automática de backups antigos

**Implementações concluídas:**
- ✅ Campo `retention` completo em [src/config.js](mdc:src/config.js)
- ✅ Interface web completa com aba "Política de Retenção"
- ✅ Validação: mínimo 1 dia, máximo 365 dias
- ✅ Dois modos: Clássico (sobrescrita) e Retenção (timestamp)
- ✅ Método `cleanupOldBackups()` em [src/services/database.js](mdc:src/services/database.js)
- ✅ Método `cleanupFtpBackups()` em [src/services/ftp.js](mdc:src/services/ftp.js)
- ✅ Rotas API `/api/cleanup-local` e `/api/cleanup-ftp`
- ✅ Botões de limpeza manual na interface
- ✅ Documentação completa em `docs/RETENTION_POLICY.md`
- ✅ Testes e ajustes finais realizados

### ✅ **v0.2.2 - Painel de Histórico** (CONCLUÍDO)
**Objetivo**: Interface completa para visualizar histórico de backups

**Implementações concluídas:**
- ✅ Criado `src/services/history.js` com SQLite
- ✅ Schema e migração automática implementados
- ✅ APIs `/api/history` e `/api/history/stats` funcionais
- ✅ Interface de histórico integrada ao dashboard
- ✅ Filtros, paginação e modal de detalhes
- ✅ Interface modernizada com tema claro/escuro
- ✅ Sidebar responsiva e suporte móvel
- ✅ Sistema de autenticação aprimorado

### **v0.3.0 - Logs Tempo Real** (Estimativa: 2-3 semanas)
**Objetivo**: Stream de logs em tempo real via WebSocket

**Sprint 1 (Semana 1-2)**:
- [ ] Integrar `socket.io` (versão compatível Node 12)
- [ ] Modificar [src/utils/logger.js](mdc:src/utils/logger.js) para broadcast
- [ ] Sistema de filtros por nível

**Sprint 2 (Semana 3)**:
- [ ] Interface "Logs ao Vivo" no dashboard
- [ ] Auto-scroll, pause manual e download

### **v0.4.0 - Notificações E-mail** (Estimativa: 2-3 semanas)
**Objetivo**: Alertas automáticos via SMTP

**Sprint 1 (Semana 1-2)**:
- [ ] Criar [src/services/notification.js](mdc:src/services/notification.js)
- [ ] Configuração SMTP em config.js
- [ ] Templates HTML responsivos

**Sprint 2 (Semana 3)**:
- [ ] Integração com scheduler
- [ ] Configuração: sempre/só falhas/só sucessos
- [ ] Rate limiting e testes

### **v0.5.0 - Telegram/WhatsApp** (Estimativa: 3-4 semanas)
**Objetivo**: Notificações por mensageiros

**Sprint 1 (Semana 1-2)**:
- [ ] Bot Telegram com `node-telegram-bot-api` (Node 12)
- [ ] Comandos: /status, /lastbackup, /logs
- [ ] Interface de configuração Bot Token

**Sprint 2 (Semana 3-4)**:
- [ ] Integração WhatsApp (biblioteca não oficial)
- [ ] Fallback e tratamento de erros
- [ ] Testes integrados

### **v1.0.0 - Release Estável** (Estimativa: 1-2 semanas)
**Objetivo**: Consolidação e estabilização

- [ ] Refactoring final
- [ ] Documentação completa
- [ ] Testes automatizados (Jest Node 12)
- [ ] Build otimizado e assinado
- [ ] Release oficial estável







