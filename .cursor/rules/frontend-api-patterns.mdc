---
description: 
globs: 
alwaysApply: true
---
# Frontend e API - Padr√µes de Interface

## üåê Estrutura da Interface Web

### Arquivos Frontend Principais
- [public/index.html](mdc:public/index.html) - Dashboard principal (5.8KB)
- [public/script.js](mdc:public/script.js) - JavaScript principal (17KB, 522 linhas)
- [public/styles.css](mdc:public/styles.css) - CSS principal (12KB, 684 linhas)
- [public/login.html](mdc:public/login.html) + [public/login.js](mdc:public/login.js) - Sistema login
- [public/setup.html](mdc:public/setup.html) + [public/setup.js](mdc:public/setup.js) - Setup inicial

### Limita√ß√µes e Diretrizes
- **JavaScript Vanilla**: Sem frameworks pesados (manter compatibilidade e tamanho)
- **CSS Puro**: Sem preprocessadores, focado em responsividade
- **Tamanho Total**: Manter < 50KB total (assets embarcados no execut√°vel)
- **Compatibilidade**: IE11+, Chrome 60+, Firefox 55+ (empresas com Windows antigo)

## üîå Padr√µes de API REST

### Estrutura de Rotas ([src/api/routes.js](mdc:src/api/routes.js))
```javascript
// ‚úÖ Padr√£o atual - manter consist√™ncia
GET    /api/config              # Obter configura√ß√µes
POST   /api/config              # Salvar configura√ß√µes
GET    /api/list-databases       # Listar bancos dispon√≠veis
POST   /api/test-ftp            # Testar conex√£o FTP
POST   /api/setup               # Configura√ß√£o inicial
POST   /api/change-password     # Alterar senha
POST   /api/login               # Autentica√ß√£o
POST   /api/logout              # Logout
```

### Padr√µes de Resposta
```javascript
// ‚úÖ Sucesso
{
  "message": "Opera√ß√£o realizada com sucesso",
  "data": { /* dados opcionais */ }
}

// ‚úÖ Erro com detalhes amig√°veis
{
  "error": "Mensagem amig√°vel para o usu√°rio",
  "details": "Detalhes t√©cnicos",
  "suggestions": ["Sugest√£o 1", "Sugest√£o 2"]
}

// ‚ùå Evitar respostas inconsistentes
{
  "status": "error",
  "msg": "Erro",
  "code": 500
}
```

### Middleware de Autentica√ß√£o
```javascript
// Padr√£o para rotas protegidas
function requireAuth(req, res, next) {
  if (!req.session.user) {
    return res.status(401).json({ error: 'Acesso negado' });
  }
  next();
}

// Aplicar em todas as rotas exceto login, setup e assets
```

## üé® Padr√µes de Interface

### Design System Atual
- **Cores Prim√°rias**: Azul (#007bff), Verde (#28a745), Vermelho (#dc3545)
- **Tipografia**: System fonts (-apple-system, BlinkMacSystemFont, Segoe UI)
- **Grid**: CSS Grid e Flexbox para layouts responsivos
- **√çcones**: Font Awesome ou √≠cones SVG embarcados

### Componentes Reutiliz√°veis

#### üîÑ Loading States
```html
<!-- Padr√£o para opera√ß√µes ass√≠ncronas -->
<button id="testBtn" class="btn btn-primary">
  <span class="btn-text">Testar Conex√£o</span>
  <span class="btn-loading hidden">
    <i class="fas fa-spinner fa-spin"></i> Testando...
  </span>
</button>
```

#### ‚ö†Ô∏è Mensagens de Status
```html
<!-- Container padr√£o para mensagens -->
<div id="messageContainer" class="message-container">
  <!-- Dinamicamente populado via JavaScript -->
</div>
```

#### üìù Formul√°rios
```html
<!-- Padr√£o para inputs de configura√ß√£o -->
<div class="form-group">
  <label for="serverInput">Servidor SQL:</label>
  <input type="text" id="serverInput" class="form-control" 
         placeholder="localhost" required>
  <small class="form-text text-muted">
    Endere√ßo do servidor SQL Server
  </small>
</div>
```

### JavaScript Patterns

#### üîÑ Requisi√ß√µes AJAX
```javascript
// ‚úÖ Padr√£o para chamadas de API
async function callAPI(endpoint, method = 'GET', data = null) {
  try {
    const options = {
      method: method,
      headers: { 'Content-Type': 'application/json' }
    };
    
    if (data) {
      options.body = JSON.stringify(data);
    }
    
    const response = await fetch(endpoint, options);
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.error || 'Erro na requisi√ß√£o');
    }
    
    return result;
  } catch (error) {
    console.error('API Error:', error);
    showMessage(error.message, 'error');
    throw error;
  }
}
```

#### üìù Manipula√ß√£o de Formul√°rios
```javascript
// ‚úÖ Padr√£o para submiss√£o de formul√°rios
function setupFormSubmission(formId, apiEndpoint, onSuccess) {
  const form = document.getElementById(formId);
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    
    try {
      setButtonLoading(form.querySelector('button[type="submit"]'), true);
      const result = await callAPI(apiEndpoint, 'POST', data);
      
      showMessage(result.message, 'success');
      if (onSuccess) onSuccess(result);
      
    } catch (error) {
      // Erro j√° tratado em callAPI
    } finally {
      setButtonLoading(form.querySelector('button[type="submit"]'), false);
    }
  });
}
```

#### üéõÔ∏è Estado de Loading
```javascript
// ‚úÖ Fun√ß√£o utilit√°ria para loading states
function setButtonLoading(button, isLoading) {
  const textSpan = button.querySelector('.btn-text');
  const loadingSpan = button.querySelector('.btn-loading');
  
  if (isLoading) {
    textSpan.classList.add('hidden');
    loadingSpan.classList.remove('hidden');
    button.disabled = true;
  } else {
    textSpan.classList.remove('hidden');
    loadingSpan.classList.add('hidden');
    button.disabled = false;
  }
}
```

## üì± Responsividade e Acessibilidade

### Breakpoints CSS
```css
/* Mobile first approach */
@media (min-width: 576px) { /* SM */ }
@media (min-width: 768px) { /* MD */ }
@media (min-width: 992px) { /* LG */ }
@media (min-width: 1200px) { /* XL */ }
```

### Padr√µes de Acessibilidade
- **Labels**: Sempre associar labels aos inputs
- **ARIA**: Usar aria-label para bot√µes e √≠cones
- **Contraste**: M√≠nimo 4.5:1 para texto normal
- **Navega√ß√£o**: Suporte completo ao teclado
- **Foco**: Indicadores visuais claros

## üîí Seguran√ßa Frontend

### Valida√ß√£o Client-Side
```javascript
// ‚úÖ Valida√ß√£o (mas sempre revalidar no backend)
function validatePassword(password) {
  if (password.length < 6) {
    throw new Error('Senha deve ter pelo menos 6 caracteres');
  }
  return true;
}

function validateRequired(value, fieldName) {
  if (!value || value.trim() === '') {
    throw new Error(`${fieldName} √© obrigat√≥rio`);
  }
  return true;
}
```

### Prote√ß√£o XSS
```javascript
// ‚úÖ Escapar HTML em conte√∫do din√¢mico
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// Usar sempre que inserir conte√∫do din√¢mico
element.innerHTML = escapeHtml(userInput);
```

## üöÄ Performance Frontend

### Otimiza√ß√µes Atuais
- **Assets Embarcados**: Tudo inclu√≠do no execut√°vel (sem CDN)
- **CSS Minificado**: Compress√£o manual quando necess√°rio
- **JavaScript Vanilla**: Sem overhead de frameworks
- **Imagens Otimizadas**: PNG/JPG comprimidos

### M√©tricas de Performance
- **First Paint**: < 500ms (local)
- **Interatividade**: < 1s para a√ß√µes b√°sicas
- **Bundle Size**: < 50KB total frontend
- **Memory Usage**: < 50MB para interface

## üìã Checklist para Novas Features Frontend

### ‚úÖ Desenvolvimento
- [ ] Interface responsiva (mobile-first)
- [ ] Loading states para opera√ß√µes ass√≠ncronas
- [ ] Valida√ß√£o client-side + backend
- [ ] Mensagens de erro amig√°veis
- [ ] Tratamento de offline/conectividade

### ‚úÖ Seguran√ßa
- [ ] Valida√ß√£o de inputs
- [ ] Escape de HTML
- [ ] CSRF protection (se aplic√°vel)
- [ ] Rate limiting no backend

### ‚úÖ UX/UI
- [ ] Feedback visual para a√ß√µes
- [ ] Estados de erro claros
- [ ] Confirma√ß√µes para a√ß√µes destrutivas
- [ ] Tooltips/ajuda contextual

### ‚úÖ Compatibilidade
- [ ] Testado em IE11+ (empresas)
- [ ] Funciona sem JavaScript (degrada√ß√£o graceful)
- [ ] Acessibilidade b√°sica (WCAG AA)
- [ ] Performance aceit√°vel em hardware antigo

