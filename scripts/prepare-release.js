const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const newVersion = process.argv[2];
if (!newVersion || !/^\d+\.\d+\.\d+$/.test(newVersion)) {
  console.error('‚ùå Erro: Forne√ßa uma vers√£o v√°lida no formato x.x.x');
  console.error('üí° Exemplo: npm run prepare-release -- 1.0.2');
  process.exit(1);
}

console.log(`üöÄ Preparando a release v${newVersion}...`);

const rootDir = path.join(__dirname, '..');

const runCommand = (command, ignoreError = false) => {
  try {
    console.log(`\n$> ${command}`);
    execSync(command, { stdio: 'inherit', cwd: rootDir });
  } catch (error) {
    if (!ignoreError) {
      console.error(`\n‚ùå Falha ao executar o comando: ${command}`);
      console.error(error.message);
      process.exit(1);
    } else {
      console.warn(`\n‚ö†Ô∏è  Comando falhou, mas foi ignorado: ${command}`);
    }
  }
};

const packageJsonPath = path.join(rootDir, 'package.json');
console.log(`\nüìù Atualizando ${path.basename(packageJsonPath)}...`);
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
packageJson.version = newVersion;
fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
console.log(`   Vers√£o atualizada para ${newVersion} em package.json`);

const nsiFilePath = path.join(rootDir, 'installer.nsi');
console.log(`\nüìù Atualizando ${path.basename(nsiFilePath)}...`);
let nsiContent = fs.readFileSync(nsiFilePath, 'utf-8');
const oldVersionRegex = /\d+\.\d+\.\d+/;
const oldVersionMatch = nsiContent.match(/!define PRODUCT_VERSION "(\d+\.\d+\.\d+)"/);

if (oldVersionMatch) {
  nsiContent = nsiContent.replace(/!define PRODUCT_VERSION ".*"/, `!define PRODUCT_VERSION "${newVersion}"`);
  nsiContent = nsiContent.replace(/VIProductVersion ".*"/, `VIProductVersion "${newVersion}.0"`);
  nsiContent = nsiContent.replace(/VIFileVersion ".*"/, `VIFileVersion "${newVersion}.0"`);
  fs.writeFileSync(nsiFilePath, nsiContent);
  console.log(`   Vers√£o atualizada para ${newVersion} em installer.nsi`);
} else {
  console.warn(`   ‚ö†Ô∏è  N√£o foi poss√≠vel encontrar a vers√£o no arquivo ${nsiFilePath}. Pulando...`);
}

console.log('\nüîÑ Sincronizando depend√™ncias e atualizando package-lock.json...');
runCommand('npm install');
console.log('   package-lock.json atualizado.');

console.log('\n‚ûï Adicionando arquivos ao stage...');
runCommand('git add package.json package-lock.json installer.nsi');
console.log('   Arquivos adicionados.');

const commitMessage = `chore: üîß preparado para release v${newVersion}`;
console.log('\n‚úâÔ∏è  Fazendo commit das altera√ß√µes...');
runCommand(`git commit -m "${commitMessage}"`);
console.log(`   Commit criado: "${commitMessage}"`);

console.log('\nüì§ Enviando para o reposit√≥rio remoto...');
runCommand('git push');
console.log('   Push para o reposit√≥rio remoto conclu√≠do!');

console.log(`\nüéâ Processo de prepara√ß√£o da release v${newVersion} finalizado com sucesso!`); 